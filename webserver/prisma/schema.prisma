generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Address {
  id                        BigInt                      @id @default(autoincrement())
  payload                   Bytes                       @unique
  AddressCredentialRelation AddressCredentialRelation[]
  TransactionOutput         TransactionOutput[]
}

model AddressCredentialRelation {
  address_id      BigInt
  credential_id   BigInt
  relation        Int
  Address         Address         @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk-address_credential-address_id")
  StakeCredential StakeCredential @relation(fields: [credential_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk-address_credential-credential_id")

  @@id([address_id, credential_id], map: "address_credential-pk")
  @@unique([address_id, credential_id, relation], map: "index-address_credential-address")
}

model Block {
  id          Int           @id @default(autoincrement())
  era         Int
  hash        Bytes
  height      Int
  epoch       Int
  slot        Int
  Transaction Transaction[]
}

model StakeCredential {
  id                        BigInt                      @id @default(autoincrement())
  credential                Bytes                       @unique
  AddressCredentialRelation AddressCredentialRelation[]
  TxCredentialRelation      TxCredentialRelation[]
}

model Transaction {
  id                   BigInt                 @id @default(autoincrement())
  hash                 Bytes                  @unique
  block_id             Int
  tx_index             Int
  payload              Bytes
  is_valid             Boolean
  Block                Block                  @relation(fields: [block_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk-transaction-block_id")
  TransactionInput     TransactionInput[]
  TransactionOutput    TransactionOutput[]
  TxCredentialRelation TxCredentialRelation[]

  @@index([block_id], map: "index-transaction-block")
}

model TransactionInput {
  id                BigInt            @id @default(autoincrement())
  utxo_id           BigInt
  tx_id             BigInt
  input_index       Int
  Transaction       Transaction       @relation(fields: [tx_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk-transaction_input-tx_id")
  TransactionOutput TransactionOutput @relation(fields: [utxo_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk-transaction_input-utxo_id")

  @@index([tx_id], map: "index-transaction_input-transaction")
  @@index([utxo_id], map: "index-transaction_input-transaction_output")
}

model TransactionOutput {
  id               BigInt             @id @default(autoincrement())
  payload          Bytes
  address_id       BigInt
  tx_id            BigInt
  output_index     Int
  Address          Address            @relation(fields: [address_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk-transaction_output-address_id")
  Transaction      Transaction        @relation(fields: [tx_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk-transaction_output-tx_id")
  TransactionInput TransactionInput[]

  @@index([address_id], map: "index-transaction_output-address")
  @@index([tx_id], map: "index-transaction_output-transaction")
}

model TxCredentialRelation {
  credential_id   BigInt
  tx_id           BigInt
  relation        Int
  StakeCredential StakeCredential @relation(fields: [credential_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk-tx_credential-credential_id")
  Transaction     Transaction     @relation(fields: [tx_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk-tx_credential-tx_id")

  @@id([tx_id, credential_id], map: "tx_credential-pk")
}

model seaql_migrations {
  version    String @id @db.VarChar
  applied_at BigInt
}
